# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import data_pb2 as data__pb2


class RandomizerServiceStub(object):
    """The service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRandomArray = channel.unary_unary(
                '/randomizer.RandomizerService/GetRandomArray',
                request_serializer=data__pb2.Empty.SerializeToString,
                response_deserializer=data__pb2.ArrayResponse.FromString,
                )
        self.GetRandomArrayStream = channel.unary_stream(
                '/randomizer.RandomizerService/GetRandomArrayStream',
                request_serializer=data__pb2.Empty.SerializeToString,
                response_deserializer=data__pb2.ArrayResponse.FromString,
                )


class RandomizerServiceServicer(object):
    """The service definition.
    """

    def GetRandomArray(self, request, context):
        """Unary RPC for getting a 640x512 array.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRandomArrayStream(self, request, context):
        """Server streaming RPC for continuously sending 640x512 arrays.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RandomizerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRandomArray': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRandomArray,
                    request_deserializer=data__pb2.Empty.FromString,
                    response_serializer=data__pb2.ArrayResponse.SerializeToString,
            ),
            'GetRandomArrayStream': grpc.unary_stream_rpc_method_handler(
                    servicer.GetRandomArrayStream,
                    request_deserializer=data__pb2.Empty.FromString,
                    response_serializer=data__pb2.ArrayResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'randomizer.RandomizerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RandomizerService(object):
    """The service definition.
    """

    @staticmethod
    def GetRandomArray(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/randomizer.RandomizerService/GetRandomArray',
            data__pb2.Empty.SerializeToString,
            data__pb2.ArrayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRandomArrayStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/randomizer.RandomizerService/GetRandomArrayStream',
            data__pb2.Empty.SerializeToString,
            data__pb2.ArrayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
