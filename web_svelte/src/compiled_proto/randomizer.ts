// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v3.19.1
// source: randomizer.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";

export const protobufPackage = "randomizer";

/** 空请求 */
export interface Empty {
}

/** 随机字符串响应 */
export interface RandomStringResponse {
  value: string;
}

/** 随机UUID响应 */
export interface RandomUUIDResponse {
  uuid: string;
}

/** 数组响应消息 */
export interface ArrayResponse {
  /** 存储数组的一行，640个float */
  row: number[];
}

export interface NumberArray2D {
  /** Each row is an array of numbers */
  matrix: NumberArray[];
}

export interface NumberArray {
  /** 1D array of numbers */
  values: number[];
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Empty>): Empty {
    return Empty.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Empty>): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseRandomStringResponse(): RandomStringResponse {
  return { value: "" };
}

export const RandomStringResponse: MessageFns<RandomStringResponse> = {
  encode(message: RandomStringResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value !== "") {
      writer.uint32(10).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RandomStringResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRandomStringResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RandomStringResponse>): RandomStringResponse {
    return RandomStringResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RandomStringResponse>): RandomStringResponse {
    const message = createBaseRandomStringResponse();
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRandomUUIDResponse(): RandomUUIDResponse {
  return { uuid: "" };
}

export const RandomUUIDResponse: MessageFns<RandomUUIDResponse> = {
  encode(message: RandomUUIDResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RandomUUIDResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRandomUUIDResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RandomUUIDResponse>): RandomUUIDResponse {
    return RandomUUIDResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RandomUUIDResponse>): RandomUUIDResponse {
    const message = createBaseRandomUUIDResponse();
    message.uuid = object.uuid ?? "";
    return message;
  },
};

function createBaseArrayResponse(): ArrayResponse {
  return { row: [] };
}

export const ArrayResponse: MessageFns<ArrayResponse> = {
  encode(message: ArrayResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.row) {
      writer.float(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArrayResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArrayResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.row.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.row.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ArrayResponse>): ArrayResponse {
    return ArrayResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ArrayResponse>): ArrayResponse {
    const message = createBaseArrayResponse();
    message.row = object.row?.map((e) => e) || [];
    return message;
  },
};

function createBaseNumberArray2D(): NumberArray2D {
  return { matrix: [] };
}

export const NumberArray2D: MessageFns<NumberArray2D> = {
  encode(message: NumberArray2D, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.matrix) {
      NumberArray.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NumberArray2D {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNumberArray2D();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.matrix.push(NumberArray.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<NumberArray2D>): NumberArray2D {
    return NumberArray2D.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NumberArray2D>): NumberArray2D {
    const message = createBaseNumberArray2D();
    message.matrix = object.matrix?.map((e) => NumberArray.fromPartial(e)) || [];
    return message;
  },
};

function createBaseNumberArray(): NumberArray {
  return { values: [] };
}

export const NumberArray: MessageFns<NumberArray> = {
  encode(message: NumberArray, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.values) {
      writer.float(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NumberArray {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNumberArray();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag === 13) {
            message.values.push(reader.float());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.values.push(reader.float());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<NumberArray>): NumberArray {
    return NumberArray.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NumberArray>): NumberArray {
    const message = createBaseNumberArray();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

/** 定义服务 */
export type RandomizerServiceDefinition = typeof RandomizerServiceDefinition;
export const RandomizerServiceDefinition = {
  name: "RandomizerService",
  fullName: "randomizer.RandomizerService",
  methods: {
    /** 一元接口，返回一个随机字符串 */
    getRandomString: {
      name: "GetRandomString",
      requestType: Empty,
      requestStream: false,
      responseType: RandomStringResponse,
      responseStream: false,
      options: {},
    },
    /** 流接口，持续返回随机UUID */
    getRandomUUIDStream: {
      name: "GetRandomUUIDStream",
      requestType: Empty,
      requestStream: false,
      responseType: RandomUUIDResponse,
      responseStream: true,
      options: {},
    },
    /** 获取单个640x512的数组 */
    getArray: {
      name: "GetArray",
      requestType: Empty,
      requestStream: false,
      responseType: ArrayResponse,
      responseStream: false,
      options: {},
    },
    /** 获取640x512的数组流 */
    getArrayStream: {
      name: "GetArrayStream",
      requestType: Empty,
      requestStream: false,
      responseType: ArrayResponse,
      responseStream: true,
      options: {},
    },
    /** 获取二维数组 */
    get2DArray: {
      name: "Get2DArray",
      requestType: Empty,
      requestStream: false,
      responseType: NumberArray2D,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface RandomizerServiceImplementation<CallContextExt = {}> {
  /** 一元接口，返回一个随机字符串 */
  getRandomString(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<RandomStringResponse>>;
  /** 流接口，持续返回随机UUID */
  getRandomUUIDStream(
    request: Empty,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<RandomUUIDResponse>>;
  /** 获取单个640x512的数组 */
  getArray(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<ArrayResponse>>;
  /** 获取640x512的数组流 */
  getArrayStream(
    request: Empty,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<ArrayResponse>>;
  /** 获取二维数组 */
  get2DArray(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<NumberArray2D>>;
}

export interface RandomizerServiceClient<CallOptionsExt = {}> {
  /** 一元接口，返回一个随机字符串 */
  getRandomString(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<RandomStringResponse>;
  /** 流接口，持续返回随机UUID */
  getRandomUUIDStream(
    request: DeepPartial<Empty>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<RandomUUIDResponse>;
  /** 获取单个640x512的数组 */
  getArray(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<ArrayResponse>;
  /** 获取640x512的数组流 */
  getArrayStream(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): AsyncIterable<ArrayResponse>;
  /** 获取二维数组 */
  get2DArray(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<NumberArray2D>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
